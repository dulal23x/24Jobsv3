Search & filter Readme File-

let's break down how to transform the provided RocketReach HTML into a functional filter sidebar for your 24Jobs site using React, TypeScript, and Shadcn/ui components. We'll then cover how the frontend interacts with the backend and how to implement the backend filtering.

**Step 1: Basic Structure and Styling (`People.tsx`)**

First, we'll create the main layout structure with the sidebar and content area, incorporating the People/Companies tabs and the collapse functionality.

```typescript:frontend/src/pages/People.tsx
// --- Imports ---
import React, { useState, useEffect } from 'react';
import { Link } from 'wouter';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { ScrollArea } from "@/components/ui/scroll-area"; // For scrollable sidebar
import { cn } from "@/lib/utils"; // Utility for conditional classes (install via shadcn)
import {
  Search, MapPin, Download, Mail, Phone, Briefcase, Building,
  SlidersHorizontal, Star, X, ChevronDown, ChevronLeft, Filter, // Added Filter icon
} from 'lucide-react';

// --- Interfaces & Mock Data (Keep as is or fetch from API later) ---
// MOCK_PEOPLE, MOCK_COMPANIES, Person, Company interfaces...

// --- Filter State Interface ---
interface Filters {
  // Define keys matching your backend query parameters
  name_query: string; // e.g., search term for name/title/company
  location_query: string;
  title_query: string;
  company_query: string;
  industry_query: string;
  skills_query: string;
  // Add others: e.g., min_employees, max_employees, revenue_min, etc.
}

// --- Main Component ---
export default function People() {
  const [activeTab, setActiveTab] = useState<'people' | 'companies'>('people');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [filters, setFilters] = useState<Partial<Filters>>({}); // Use Partial for optional filters
  const [activeFilterBadges, setActiveFilterBadges] = useState<{ key: keyof Filters; value: string }[]>([]);

  // --- Data States (Initially empty, fetched via API) ---
  const [peopleResults, setPeopleResults] = useState<Person[]>(MOCK_PEOPLE); // Replace MOCK_PEOPLE with []
  const [companyResults, setCompanyResults] = useState<Company[]>(MOCK_COMPANIES); // Replace MOCK_COMPANIES with []
  const [totalPeopleCount, setTotalPeopleCount] = useState(0); // For displaying total results
  const [totalCompanyCount, setTotalCompanyCount] = useState(0);

  // --- Interaction States ---
  const [connectedPeople, setConnectedPeople] = useState<Set<number>>(new Set());
  const [showContactInfo, setShowContactInfo] = useState<Record<number, boolean>>({}); // Use Record for individual unlock status
  const [followedCompanies, setFollowedCompanies] = useState<Set<number>>(new Set());
  const [showCompanyInfo, setShowCompanyInfo] = useState<Record<number, boolean>>({});

  // --- API Fetching State (Example with react-query - install @tanstack/react-query) ---
  // const { data: apiData, isLoading, error, refetch } = useQuery({
  //   queryKey: ['searchResults', activeTab, filters], // Key includes filters to trigger refetch
  //   queryFn: async () => {
  //     const endpoint = activeTab === 'people' ? '/api/people/' : '/api/companies/';
  //     const params = new URLSearchParams(filters as Record<string, string>).toString();
  //     const response = await fetch(`${endpoint}?${params}`); // Replace with your API base URL
  //     if (!response.ok) throw new Error('Network response was not ok');
  //     return response.json();
  //   },
  //   enabled: false, // Initially disable query, trigger manually or on filter change
  // });

  // --- Effect to Update Results from API Data (Example) ---
  // useEffect(() => {
  //   if (apiData) {
  //     if (activeTab === 'people') {
  //       setPeopleResults(apiData.results || []); // Adjust based on your API response structure
  //       setTotalPeopleCount(apiData.count || 0);
  //     } else {
  //       setCompanyResults(apiData.results || []);
  //       setTotalCompanyCount(apiData.count || 0);
  //     }
  //   }
  // }, [apiData, activeTab]);

  // --- Effect to Update Badges when Filters Change ---
  useEffect(() => {
    const badges = Object.entries(filters)
      .filter(([, value]) => value !== "" && value !== undefined && value !== null)
      .map(([key, value]) => ({ key: key as keyof Filters, value: String(value) }));
    setActiveFilterBadges(badges);
  }, [filters]);

  // --- Handlers ---
  const handleFilterChange = (key: keyof Filters, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
    // Optional: Trigger API refetch here if not using a separate Apply button
    // refetch();
  };

  const clearFilter = (key: keyof Filters) => {
    setFilters((prev) => {
      const newFilters = { ...prev };
      delete newFilters[key]; // Remove the key entirely
      return newFilters;
    });
    // Optional: Trigger API refetch
    // refetch();
  };

  const clearAllFilters = () => {
    setFilters({});
    // Optional: Trigger API refetch
    // refetch();
  };

  const handleApplyFilters = () => {
    // Manually trigger the API refetch if needed
    // refetch();
    console.log("Applying filters:", filters);
    // For mock data: Apply filters directly (as done in previous example's useEffect)
    // --- MOCK FILTERING LOGIC START ---
    let people = MOCK_PEOPLE.filter(p =>
        (!filters.name_query || `${p.firstName} ${p.lastName}`.toLowerCase().includes(filters.name_query.toLowerCase())) &&
        (!filters.location_query || p.location.toLowerCase().includes(filters.location_query.toLowerCase())) &&
        (!filters.title_query || p.position.toLowerCase().includes(filters.title_query.toLowerCase())) &&
        (!filters.company_query || p.company.toLowerCase().includes(filters.company_query.toLowerCase()))
        // Add other filter checks
    );
    setPeopleResults(people);
    setTotalPeopleCount(people.length);

     let companies = MOCK_COMPANIES.filter(c =>
        (!filters.company_query || c.name.toLowerCase().includes(filters.company_query.toLowerCase())) &&
        (!filters.location_query || c.location.toLowerCase().includes(filters.location_query.toLowerCase())) &&
        (!filters.industry_query || c.industry.toLowerCase().includes(filters.industry_query.toLowerCase()))
        // Add other filter checks
    );
    setCompanyResults(companies);
    setTotalCompanyCount(companies.length);
    // --- MOCK FILTERING LOGIC END ---
  };


  // --- UNLOCKING LOGIC ---
  const handleUnlockContact = async (personId: number) => {
      // Prevent unlocking if already shown
      if (showContactInfo[personId]) return;

      console.log(`Attempting to unlock contact for person ID: ${personId}`);
      // **API Call Placeholder**
      try {
          // const response = await fetch(`/api/people/${personId}/unlock/`, { method: 'POST' }); // Your unlock endpoint
          // if (!response.ok) {
          //   // Handle errors (e.g., insufficient credits, not found, server error)
          //   const errorData = await response.json();
          //   console.error("Unlock failed:", errorData.detail || "Unknown error");
          //   alert(`Failed to unlock: ${errorData.detail || 'Please try again.'}`);
          //   return;
          // }
          // const unlockedData = await response.json(); // Get updated person data with revealed info

          // --- MOCK UNLOCK SUCCESS ---
          await new Promise(resolve => setTimeout(resolve, 300)); // Simulate network delay
          const unlockedData = MOCK_PEOPLE.find(p => p.id === personId);
          if (!unlockedData) throw new Error("Person not found in mock data");
          // --- END MOCK ---


          // Update the specific person in the results list
          setPeopleResults(prevResults =>
              prevResults.map(p =>
                  p.id === personId
                      ? { ...p, email: unlockedData.email, phone: unlockedData.phone } // Update with real data
                      : p
              )
          );

          // Set the unlocked status for this person
          setShowContactInfo(prev => ({ ...prev, [personId]: true }));

      } catch (error) {
          console.error("Error during contact unlock:", error);
          alert("An error occurred while trying to unlock contact info.");
      }
  };


  // --- Filter Definitions ---
  const personFilterGroups = [
     { groupName: "Name", facets: [{ key: "name_query", displayName: "Name", placeholder: "Enter name..." }] },
     { groupName: "Location", facets: [{ key: "location_query", displayName: "Location", placeholder: "City, State, Country..." }] },
     { groupName: "Occupation", facets: [
         { key: "title_query", displayName: "Job Title", placeholder: "Enter job title..." },
         // { key: "department_query", displayName: "Department", placeholder: "e.g., Marketing" },
         // { key: "skills_query", displayName: "Skills", placeholder: "e.g., React, Python" },
         // { key: "years_experience_min", displayName: "Min Experience", type: "number", placeholder: "Min Years" },
         // { key: "years_experience_max", displayName: "Max Experience", type: "number", placeholder: "Max Years" },
     ]},
     { groupName: "Employer", facets: [
         { key: "company_query", displayName: "Company Name or Domain", placeholder: "Enter company..." },
         { key: "industry_query", displayName: "Industry", placeholder: "e.g., Technology" },
         // { key: "company_size_min", displayName: "Min Employees", type: "number" },
         // { key: "company_size_max", displayName: "Max Employees", type: "number" },
         // { key: "company_revenue_min", displayName: "Min Revenue ($M)", type: "number" },
         // { key: "company_revenue_max", displayName: "Max Revenue ($M)", type: "number" },
     ]},
      // { groupName: "Education", facets: [...] },
      // { groupName: "Contact Info", facets: [...] }, // Maybe checkboxes: Has Email, Has Phone
  ];

   const companyFilterGroups = [
       { groupName: "Company", facets: [{ key: "company_query", displayName: "Company Name or Domain", placeholder: "Enter company..." }] },
       { groupName: "Location", facets: [{ key: "location_query", displayName: "Location", placeholder: "City, State, Country..." }] },
       { groupName: "Industry", facets: [{ key: "industry_query", displayName: "Industry", placeholder: "e.g., Technology" }] },
       // Add more company-specific filters (size, revenue, etc.)
   ];

  const currentFilterGroups = activeTab === 'people' ? personFilterGroups : companyFilterGroups;
  const currentResults = activeTab === 'people' ? peopleResults : companyResults;
  const currentTotalCount = activeTab === 'people' ? totalPeopleCount : totalCompanyCount;


  return (
    <div className="min-h-screen flex flex-col font-inter text-gray-800 bg-gray-100">
      {/* Header might be global */}
      <main className="flex-grow">
        <div className="container mx-auto max-w-screen-xl px-4 md:px-6 py-6">
          {/* Top Tabs */}
          <div className="flex mb-5 bg-white border border-gray-200 rounded-full w-auto sm:w-72 p-1 shadow-sm mx-auto sm:mx-0">
            {/* People/Companies Tab Buttons */}
             <button
               className={`flex-1 py-2 px-4 rounded-full font-medium text-sm transition-all duration-200 ease-in-out ${
                 activeTab === "people"
                   ? "bg-blue-600 text-white shadow-md"
                   : "text-gray-600 hover:bg-gray-100"
               }`}
               onClick={() => setActiveTab("people")}
             >
               People
             </button>
             <button
               className={`flex-1 py-2 px-4 rounded-full font-medium text-sm transition-all duration-200 ease-in-out ${
                 activeTab === "companies"
                   ? "bg-blue-600 text-white shadow-md"
                   : "text-gray-600 hover:bg-gray-100"
               }`}
               onClick={() => setActiveTab("companies")}
             >
               Companies
             </button>
          </div>

          {/* Main Layout Grid */}
          <div className={cn(
            "grid grid-cols-1 gap-6 transition-[grid-template-columns] duration-300 ease-in-out",
            sidebarCollapsed ? 'md:grid-cols-[auto_1fr]' : 'md:grid-cols-[280px_1fr]' // Adjust width as needed
          )}>

            {/* --- Left Sidebar (Filters) --- */}
            <aside className={cn(
              "bg-white rounded-lg shadow-sm border border-gray-200 transition-all duration-300 ease-in-out",
              sidebarCollapsed ? 'w-16 p-3' : 'w-full p-4' // Adjust collapsed width/padding
            )}>
              {sidebarCollapsed ? (
                // -- Collapsed Sidebar View --
                 <div className="flex flex-col items-center gap-4">
                   <Button variant="ghost" size="icon" onClick={() => setSidebarCollapsed(false)} className="mb-2 text-gray-600 hover:bg-gray-100">
                     <ChevronLeft size={20} /> {/* Pointing left to expand */}
                   </Button>
                   <div className="flex flex-col items-center gap-5">
                     <Button variant="ghost" size="icon" className="text-gray-500 relative" title="Saved Searches">
                        <Star size={20} />
                        {/* Add count badge if needed */}
                     </Button>
                     <Button variant="ghost" size="icon" className="text-gray-500 relative" title="Active Filters">
                       <Filter size={20} className={activeFilterBadges.length > 0 ? 'text-blue-600' : ''}/>
                       {activeFilterBadges.length > 0 && (
                         <span className="absolute -top-1 -right-1 bg-blue-600 text-white text-[10px] font-bold w-4 h-4 rounded-full flex items-center justify-center">
                           {activeFilterBadges.length}
                         </span>
                       )}
                     </Button>
                      {/* Add other collapsed icons if needed */}
                   </div>
                 </div>
              ) : (
                 // -- Expanded Sidebar View --
                <div className="flex flex-col h-full">
                  {/* Header */}
                  <div className="flex justify-between items-center mb-3 pb-3 border-b border-gray-200">
                     <h2 className="text-base font-semibold text-gray-800 flex items-center gap-2">
                        <Filter size={16} /> Filters
                     </h2>
                     <Button variant="ghost" size="icon" onClick={() => setSidebarCollapsed(true)} className="text-gray-500 hover:bg-gray-100 h-7 w-7">
                       <ChevronDown size={18} /> {/* Or ChevronLeft */}
                     </Button>
                  </div>

                  {/* Scrollable Area for Filters */}
                  <ScrollArea className="flex-grow pr-3 -mr-3 mb-4"> {/* Negative margin hides scrollbar slightly */}
                      {/* Saved Searches */}
                      <Accordion type="single" collapsible className="w-full mb-4">
                        <AccordionItem value="saved-searches" className="border-none">
                          <AccordionTrigger className="py-1.5 px-1 text-sm font-medium text-gray-700 hover:no-underline hover:bg-gray-50 rounded data-[state=closed]:opacity-80">
                            <div className="flex items-center gap-2">
                              <Star size={16} className="text-yellow-500"/> Saved Searches
                            </div>
                          </AccordionTrigger>
                          <AccordionContent className="pt-2 pb-0 px-1 text-xs text-gray-500">
                            You have no saved searches yet.
                          </AccordionContent>
                        </AccordionItem>
                      </Accordion>

                      {/* Active Filters */}
                      <div className="mb-4 px-1">
                         <div className="flex justify-between items-center mb-1.5">
                           <h3 className="text-xs font-semibold text-gray-500 uppercase tracking-wide">Active Filters</h3>
                           {activeFilterBadges.length > 0 && (
                             <Button variant="link" size="sm" className="text-blue-600 h-auto p-0 text-xs" onClick={clearAllFilters}>
                               Clear All
                             </Button>
                           )}
                         </div>
                         {activeFilterBadges.length > 0 ? (
                           <div className="flex flex-wrap gap-1.5">
                             {activeFilterBadges.map((badge) => (
                               <div key={badge.key} className="flex items-center bg-blue-100 text-blue-800 text-xs font-medium pl-2 pr-1 py-0.5 rounded-full">
                                 <span>{badge.value}</span>
                                 <button onClick={() => clearFilter(badge.key)} className="ml-1 text-blue-500 hover:text-blue-700 rounded-full hover:bg-blue-200 p-0.5">
                                   <X size={12} strokeWidth={2.5}/>
                                 </button>
                               </div>
                             ))}
                           </div>
                         ) : (
                           <p className="text-xs text-gray-400 italic">No filters applied.</p>
                         )}
                       </div>

                      {/* Filter Accordions */}
                      <Accordion type="multiple" defaultValue={currentFilterGroups.map(g => g.groupName)} className="w-full space-y-1">
                        {currentFilterGroups.map((group) => (
                          <AccordionItem value={group.groupName} key={group.groupName} className="border border-gray-200 rounded-md overflow-hidden bg-white">
                            <AccordionTrigger className="py-2 px-3 text-sm font-medium hover:bg-gray-50 hover:no-underline data-[state=open]:border-b data-[state=open]:bg-gray-50">
                               {group.groupName}
                            </AccordionTrigger>
                            <AccordionContent className="p-3 space-y-3 text-sm">
                              {group.facets.map((facet) => (
                                 <div key={facet.key}>
                                   <Label htmlFor={facet.key} className="text-xs font-medium text-gray-600 mb-1 block">{facet.displayName}</Label>
                                   {/* Add more input types here (Select, Range Slider, Checkbox group) based on facet.type */}
                                   <Input
                                       id={facet.key}
                                       type={facet.type === 'number' ? 'number' : 'search'}
                                       placeholder={facet.placeholder}
                                       value={filters[facet.key as keyof Filters] || ""}
                                       onChange={(e) => handleFilterChange(facet.key as keyof Filters, e.target.value)}
                                       className="h-8 text-sm" // Smaller input
                                   />
                                 </div>
                              ))}
                            </AccordionContent>
                          </AccordionItem>
                        ))}
                      </Accordion>
                  </ScrollArea> {/* End Scroll Area */}

                   {/* Action Buttons */}
                   <div className="mt-auto border-t pt-3 space-y-2"> {/* mt-auto pushes to bottom */}
                     <Button className="w-full bg-blue-600 hover:bg-blue-700 h-9 text-sm" onClick={handleApplyFilters}>
                        Apply Filters
                     </Button>
                     <Button variant="outline" className="w-full h-9 text-sm">
                       <Star size={14} className="mr-1.5"/> Save Search
                     </Button>
                   </div>
                </div>
              )}
            </aside>

            {/* --- Main content area (Results) --- */}
            <div className="min-w-0"> {/* Needed for grid layout */}
               {/* Loading/Error States Placeholder */}
               {/* {isLoading && <p>Loading...</p>} */}
               {/* {error && <p>Error loading results: {error.message}</p>} */}

               {/* Results Header (Count) */}
               <div className="mb-3 text-sm text-gray-600">
                 Showing <span className="font-semibold">{currentResults.length}</span> of <span className="font-semibold">{currentTotalCount}</span> {activeTab}
               </div>

               {/* --- People/Company Cards --- */}
               {activeTab === 'people' ? (
                   <div className="bg-white rounded-lg shadow-md border border-gray-200 divide-y divide-gray-200">
                       {peopleResults.length > 0 ? (
                           peopleResults.map((person) => (
                              <div key={person.id} className="p-4 flex items-start gap-4 hover:bg-gray-50/70">
                                  <Checkbox id={`person-${person.id}`} className="mt-1 flex-shrink-0 border-gray-300"/>
                                  <img
                                     src={person.avatar} alt={`${person.firstName} ${person.lastName}`}
                                     className="w-10 h-10 rounded-full object-cover border border-gray-200 shadow-sm flex-shrink-0"
                                  />
                                  <div className="flex-grow grid grid-cols-1 md:grid-cols-3 gap-x-4 gap-y-1 text-sm min-w-0">
                                      {/* Col 1: Name & Title */}
                                      <div className="min-w-0">
                                          <Link href={`/profile/${person.id}`} className="font-semibold text-gray-800 hover:text-blue-600 truncate block">{person.firstName} {person.lastName}</Link>
                                          <p className="text-gray-600 truncate">{person.position}</p>
                                          <p className="text-gray-500 mt-0.5 flex items-center text-xs truncate">
                                              <MapPin size={12} className="mr-1 text-gray-400 flex-shrink-0" />
                                              {person.location}
                                          </p>
                                      </div>
                                      {/* Col 2: Company */}
                                      <div className="min-w-0">
                                          <Link href={`/company/${person.company}`} className="text-blue-600 hover:underline font-medium truncate block">
                                              {person.company}
                                          </Link>
                                          {/* Add Company Industry/Size if available */}
                                      </div>
                                      {/* Col 3: Contact Info */}
                                      <div className="space-y-1">
                                          <div className="flex items-center text-xs">
                                              <Mail size={13} className="text-gray-400 mr-1.5 flex-shrink-0" />
                                              <span className={`px-1.5 py-0.5 rounded ${showContactInfo[person.id] ? 'bg-green-100 text-green-800 font-medium' : 'bg-gray-100 text-gray-500'} select-all truncate`}>
                                                  {showContactInfo[person.id] ? person.email.full : `••••${person.email.hidden}`}
                                              </span>
                                          </div>
                                          <div className="flex items-center text-xs">
                                              <Phone size={13} className="text-gray-400 mr-1.5 flex-shrink-0" />
                                              <span className={`px-1.5 py-0.5 rounded ${showContactInfo[person.id] ? 'bg-green-100 text-green-800 font-medium' : 'bg-gray-100 text-gray-500'} select-all truncate`}>
                                                  {showContactInfo[person.id] ? person.phone.full : person.phone.hidden}
                                              </span>
                                          </div>
                                      </div>
                                  </div>
                                   {/* Actions */}
                                  <div className="flex-shrink-0 ml-2">
                                      <Button
                                          size="sm" variant={showContactInfo[person.id] ? "outline" : "default"}
                                          className={`h-8 text-xs whitespace-nowrap px-3 shadow-sm transition-all duration-150 ${showContactInfo[person.id] ? 'text-green-700 bg-green-50 border-green-200 hover:bg-green-100' : 'bg-blue-600 hover:bg-blue-700 text-white'}`}
                                          onClick={() => handleUnlockContact(person.id)}
                                          disabled={showContactInfo[person.id]} // Disable if already unlocked/shown
                                      >
                                          {showContactInfo[person.id] ? 'Unlocked' : 'Unlock Contact'}
                                      </Button>
                                      {/* Add Connect Button Here if needed */}
                                  </div>
                              </div>
                           ))
                       ) : (
                           <p className="p-6 text-center text-gray-500 italic">No people found matching your criteria.</p>
                       )}
                   </div>
               ) : (
                   <div className="bg-white rounded-lg shadow-md border border-gray-200 divide-y divide-gray-200">
                       {/* Company Results Rendering (similar structure to people) */}
                        {companyResults.length > 0 ? (
                            companyResults.map((company) => (
                                <div key={company.id} className="p-4 flex items-start gap-4 hover:bg-gray-50/70">
                                    {/* ... Company card content ... */}
                                </div>
                            ))
                        ) : (
                             <p className="p-6 text-center text-gray-500 italic">No companies found matching your criteria.</p>
                        )}
                   </div>
               )}

               {/* --- Pagination Placeholder --- */}
                <div className="mt-6 flex justify-center">
                    {/* Add Pagination Component Here */}
                    <p className="text-xs text-gray-500">(Pagination Controls Go Here)</p>
                </div>

            </div> {/* End Main Content Column */}
          </div> {/* End Main Grid */}
        </div> {/* End Container */}
      </main>
      {/* Footer might be global */}
    </div>
  );
}
```

**Step 2: Frontend Filtering & API Interaction**

1.  **State Management:** We've set up the `filters` state object. Each input in the sidebar updates its corresponding key in this object via `handleFilterChange`.
2.  **Triggering Search:**
    *   **Manual:** The "Apply Filters" button calls `handleApplyFilters`. Inside this function (or triggered by it), you'd initiate the API call.
    *   **Automatic (Debounced):** You could remove the "Apply Filters" button and have the `useEffect` hook that watches `debouncedFilters` trigger the API call (`refetch()` if using `react-query`). Debouncing prevents excessive API calls while typing.
3.  **API Call:**
    *   Use the `fetch` API or a library like `axios`.
    *   Install and use `@tanstack/react-query` for robust data fetching, caching, and state management (recommended).
    *   Construct the API endpoint URL (e.g., `http://localhost:8000/api/people/`).
    *   Build the query string from the non-empty values in the `filters` state. Example:
        ```javascript
        const queryParams = new URLSearchParams();
        Object.entries(filters).forEach(([key, value]) => {
          if (value !== null && value !== undefined && value !== '') {
            queryParams.append(key, String(value)); // Ensure value is string
          }
        });
        const queryString = queryParams.toString();
        const apiUrl = `http://localhost:8000/api/people/?${queryString}`; // Replace base URL
        ```
    *   Make the GET request.
4.  **Handling Response:**
    *   Update `peopleResults`/`companyResults` state with the data from the API response.
    *   Update `totalPeopleCount`/`totalCompanyCount` if your API provides pagination/count info.
    *   Handle loading and error states (ideally managed by `react-query`).

**Step 3: Backend Implementation Guide (Django/DRF)**

1.  **Install `django-filter`:** This library simplifies filtering.
    ```bash
    pip install django-filter
    # Add 'django_filters' to INSTALLED_APPS in settings.py
    ```
2.  **Create FilterSet:** Define filters corresponding to your frontend state keys and model fields.
    ```python
    # api/filters.py
    import django_filters
    from .models import Person, Company
    from django.db.models import Q # For OR queries if needed

    class PersonFilter(django_filters.FilterSet):
        # Define filters matching frontend state keys (e.g., filters.name_query)
        name_query = django_filters.CharFilter(method='filter_name_title_company', label='Search Name, Title, or Company')
        location_query = django_filters.CharFilter(method='filter_location', label='Search Location')
        title_query = django_filters.CharFilter(field_name='title', lookup_expr='icontains')
        company_query = django_filters.CharFilter(field_name='company_name', lookup_expr='icontains') # Or filter on related Company name
        industry_query = django_filters.CharFilter(field_name='company__industry', lookup_expr='icontains') # Example: Filter on related company industry
        skills_query = django_filters.CharFilter(method='filter_skills', label='Search Skills') # Requires custom method if skills are complex

        class Meta:
            model = Person
            # List fields you want to allow direct filtering on (if not using custom methods)
            fields = ['title_query', 'company_query', 'state', 'country'] # Add more as needed

        def filter_name_title_company(self, queryset, name, value):
            # Custom filter for combined name/title/company search
            return queryset.filter(
                Q(first_name__icontains=value) |
                Q(last_name__icontains=value) |
                Q(title__icontains=value) |
                Q(company__name__icontains=value) | # Related company name
                Q(company_name__icontains=value)    # Direct company name field
            ).distinct() # Use distinct if Q objects might cause duplicates

        def filter_location(self, queryset, name, value):
            # Custom filter for combined city/state/country search
            return queryset.filter(
                Q(city__icontains=value) |
                Q(state__icontains=value) |
                Q(country__icontains=value)
            ).distinct()

        def filter_skills(self, queryset, name, value):
            # Placeholder: Implement skill filtering based on how skills are stored
            # e.g., if skills is a JSONField or ManyToManyField
            # return queryset.filter(skills__contains=value) # Example
            return queryset # Return unchanged queryset for now

    class CompanyFilter(django_filters.FilterSet):
        company_query = django_filters.CharFilter(field_name='name', lookup_expr='icontains')
        location_query = django_filters.CharFilter(method='filter_location', label='Search Location')
        industry_query = django_filters.CharFilter(field_name='industry', lookup_expr='icontains')
        # Add filters for size, revenue etc.

        class Meta:
            model = Company
            fields = ['company_query', 'industry_query'] # Add direct fields

        def filter_location(self, queryset, name, value):
            # Simple location filter for company
             return queryset.filter(location__icontains=value)

    ```
3.  **Update ViewSet:** Integrate the `FilterSet`.
    ```python
    # api/views.py
    from rest_framework import viewsets
    from django_filters.rest_framework import DjangoFilterBackend
    from .models import Person, Company
    from .serializers import PersonResponseSerializer, CompanySerializer # Use PersonResponseSerializer for masked data
    from .filters import PersonFilter, CompanyFilter
    from rest_framework.decorators import action # For unlock action
    from rest_framework.response import Response
    from rest_framework import status
    from rest_framework.permissions import IsAuthenticated # Require login for unlock

    class PeopleViewSet(viewsets.ReadOnlyModelViewSet): # ReadOnly unless you add create/update
        queryset = Person.objects.select_related('company').all() # Optimize query
        serializer_class = PersonResponseSerializer # Use the response serializer
        filter_backends = [DjangoFilterBackend]
        filterset_class = PersonFilter
        # Add pagination_class if needed

        @action(detail=True, methods=['post'], permission_classes=[IsAuthenticated]) # URL: /api/people/{id}/unlock/
        def unlock(self, request, pk=None):
            try:
                person = self.get_object() # Gets person by pk
            except Person.DoesNotExist:
                 return Response({"detail": "Person not found."}, status=status.HTTP_404_NOT_FOUND)

            # --- Permission/Credit Check Logic ---
            # Example: Check if user has credits
            # if request.user.profile.credits < 1:
            #     return Response({"detail": "Insufficient credits."}, status=status.HTTP_402_PAYMENT_REQUIRED)
            # request.user.profile.credits -= 1
            # request.user.profile.save()
            # -------------------------------------

            # Unlock the person (in a real app, you might not store this permanently
            # on the Person model itself, maybe track unlocks per user)
            # For this example, we'll just use the is_unlocked field if it exists
            # or simply return the full data without modifying the model state permanently.

            # Option 1: Mark person as unlocked (if field exists)
            # person.is_unlocked = True # Make sure your serializer uses this
            # person.save()

            # Option 2: Just return the full data for this request
            # We achieve this by simply *not* masking in the serializer when accessed via this endpoint
            # Let's simulate returning full data by directly creating the dict:
            unlocked_data = {
                 'id': person.id,
                 'first_name': person.first_name,
                 'last_name': person.last_name,
                 'title': person.title,
                 'company': {'id': person.company.id, 'name': person.company.name} if person.company else {'id': None, 'name': person.company_name},
                 'city': person.city,
                 'state': person.state,
                 'country': person.country,
                 'email': person.email, # Return full email
                 'phone': person.phone, # Return full phone
                 'is_unlocked': True, # Indicate unlocked status in response
                 'connect_status': person.connect_status
            }


            # You might want a specific serializer for the unlocked response
            # serializer = PersonSerializer(person) # Use the basic serializer if it has all fields
            # return Response(serializer.data)

            return Response(unlocked_data, status=status.HTTP_200_OK)


    class CompanyViewSet(viewsets.ReadOnlyModelViewSet):
        queryset = Company.objects.all()
        serializer_class = CompanySerializer
        filter_backends = [DjangoFilterBackend]
        filterset_class = CompanyFilter
        # Add pagination_class if needed

    ```
4.  **Update URLs:**
    ```python
    # api/urls.py
    from django.urls import path, include
    from rest_framework.routers import DefaultRouter
    from .views import PeopleViewSet, CompanyViewSet

    router = DefaultRouter()
    router.register(r'people', PeopleViewSet)
    router.register(r'companies', CompanyViewSet)

    urlpatterns = [
        path('', include(router.urls)),
    ]
    ```
5.  **Serializer (`PersonResponseSerializer`):** Keep the logic for masking email/phone based on `is_unlocked` (or determine unlock status based on the request context if not storing `is_unlocked` directly). The `unlock` action above bypasses the default serializer logic slightly for demonstration, but ideally, the serializer handles the conditional logic.

**Step 4: Frontend Unlock Implementation**

1.  **Modify `handleUnlockContact`:** Make the actual `fetch` call to the `/api/people/{id}/unlock/` endpoint (using POST).
2.  **Update State:** On a successful response (status 200), update the specific person's data within the `peopleResults` state using the data returned from the API (which should now contain the full email/phone). Also, update the `showContactInfo` state for that `personId` to `true`.
3.  **Button State:** The "Unlock Contact" button's appearance and disabled state should react to the `showContactInfo[person.id]` status.

This detailed approach provides a robust filtering system for 24Jobs, mirroring the capabilities shown in the RocketReach example while using modern React practices and connecting to a Django backend. Remember to install dependencies (`django-filter`, `@tanstack/react-query`, Shadcn UI components) and adapt the model fields, filter keys, and API endpoints to your exact project structure.
